// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Authorizer is an autogenerated mock type for the Authorizer type
type Authorizer struct {
	mock.Mock
}

// Apop provides a mock function with given fields: user, timestampBanner, digest
func (_m *Authorizer) Apop(user string, timestampBanner string, digest string) error {
	ret := _m.Called(user, timestampBanner, digest)

	if len(ret) == 0 {
		panic("no return value specified for Apop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(user, timestampBanner, digest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserPass provides a mock function with given fields: user, pass
func (_m *Authorizer) UserPass(user string, pass string) error {
	ret := _m.Called(user, pass)

	if len(ret) == 0 {
		panic("no return value specified for UserPass")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(user, pass)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAuthorizer creates a new instance of Authorizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthorizer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Authorizer {
	mock := &Authorizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
